{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-fc7060414ddccfe4a1a7ccf0d0c00ccfbf49833b94943091fb62991c19405ab14fb4f01a5a421f26170d1a45c565c1aecbbf2397e1e74af9e063ab26bd82c177",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'first-angular'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { RouterLink, RouterOutlet } from '@angular/router'\n\n@Component({\n    selector: 'app-root',\n    standalone: true,\n    imports: [CommonModule, RouterLink, RouterOutlet],\n    templateUrl: './app.component.html',\n    styleUrl: './app.component.css'\n})\nexport class AppComponent {\n    title = 'first-angular'\n}\n",
            "styleUrl": "./app.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<main class=\"background\">\n  <img class=\"clouds-bg\" src=\"/assets/images/moln.png\" alt=\"\">\n  <img class=\"clouds-fg\" src=\"/assets/images/moln.png\" alt=\"\">\n  <router-outlet></router-outlet>\n</main>"
        },
        {
            "name": "ButtonComponentComponent",
            "id": "component-ButtonComponentComponent-454b0613d50036c8143d0ab22ee9f8afdc186b80d0706c192ae5d79dc64901ccad89e5c9dd7c81548cad9b804ccf040e67da09df4aa39b1cbf8d881a4e38d6cc",
            "file": "src/app/button-component/button-component.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button-component",
            "styleUrls": [
                "./button-component.component.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'blue'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "\"blue\" | \"green\" | \"yellow\" | \"smallYellow\" | \"red\" | \"black\" | \"none\"",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { Component, Input, Output, EventEmitter } from '@angular/core'\n\n@Component({\n    selector: 'app-button-component',\n    standalone: true,\n    imports: [CommonModule],\n    template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n  >\n    {{ label }}\n  </button>`,\n    styleUrls: ['./button-component.component.css'],\n})\nexport class ButtonComponentComponent {\n\n    @Input()\n        color: 'blue' | 'green' | 'yellow' | 'smallYellow' | 'red' | 'black' | 'none' = 'blue'\n\n\n\n    @Input()\n        label = 'Button'\n\n\n    @Output()\n        onClick = new EventEmitter<Event>()\n\n    public get classes(): string[] {\n        return ['button', `button--${this.color}`,]\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import url(\"https://fonts.googleapis.com/css2?family=VT323&display=swap\");\n\n.button {\n  display: inline-block;\n  cursor: pointer;\n  \n  font-weight: 700;\n  font-size: 25px;\n  font-family: \"VT323\", monospace;\n  line-height: 1;\n\n  width: 9em;\n  padding: 6px;\n  border-width: 5px;\n  border-style: solid;\n  \n\n  color: rgb(0, 0, 0);\n}\n\n.button--blue {\n  border-color: #697d8a27;\n  background-color: #ceebff;\n}\n.button--green {\n  border-color: #697d8a27;\n  background-color: #bcffb1;\n}\n\n.button--yellow {\n  border-color: #697d8a27;\n  background-color: #fff067;\n}\n\n.button--smallYellow {\n  border-color: #697d8a27;\n  background-color: #fff067;\n  width: 4.5em;\n}\n\n.button--red {\n  border-color: #697d8a27;\n  background-color: #ff9999;\n}\n\n.button--black {\n  color: #b92713;\n  border-color: #141414;\n  background-color: #2b2b2b;\n}\n\n.button--none {\n  border-color: transparent;\n  background-color: transparent;\n}\n",
                    "styleUrl": "./button-component.component.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 32
                    }
                }
            }
        },
        {
            "name": "EndingScreenComponent",
            "id": "component-EndingScreenComponent-3023c4ade12b8dce2588d55deb5ff3dd9fd5d24b6deaceea2b21e7de5f9fa1003e1031cbf954b66fac7990478c062923e60b2a6cf0597b508833301233d7a6b4",
            "file": "src/app/ending-screen/ending-screen.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-end",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./ending-screen.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "sendMessage",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "condition",
                    "defaultValue": "'highscoreChart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "conditionToSendExit",
                    "defaultValue": "'start'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "conditionToSendRestart",
                    "defaultValue": "'game'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "highscore",
                    "defaultValue": "localStorage.getItem('highscore') ? JSON.parse(localStorage.getItem('highscore')!) : [{ name: ' ', score: 0 }, { name: ' ', score: 0 }, { name: ' ', score: 0 }]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[literal type]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "nameInput",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'nameInput'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "topScores",
                    "defaultValue": "[0, 1, 2]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "checkIfHighscore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickExit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickRestart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setNameForHighscore",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sortHighscore",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "TileComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponentComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common'\nimport { Component, ElementRef, EventEmitter, OnInit, Output, ViewChild } from '@angular/core'\nimport { TileComponent } from '../tile/tile.component'\n\nimport { ButtonComponentComponent } from '../button-component/button-component.component'\n\n@Component({\n    selector: 'app-end',\n    standalone: true,\n    imports: [CommonModule, TileComponent,ButtonComponentComponent,],\n    templateUrl: './ending-screen.component.html',\n    styleUrl: './ending-screen.component.css'\n})\nexport class EndingScreenComponent implements OnInit {\n    conditionToSendRestart: string = 'game'\n    conditionToSendExit: string = 'start'\n    topScores: number[] = [0, 1, 2]\n    highscore: [{ name: string, score: number }] = localStorage.getItem('highscore') ? JSON.parse(localStorage.getItem('highscore')!) : [{ name: ' ', score: 0 }, { name: ' ', score: 0 }, { name: ' ', score: 0 }]\n    condition: string = 'highscoreChart'\n\n    @ViewChild('nameInput') nameInput!: ElementRef\n\n    sortHighscore() {\n        const score: number = localStorage.getItem('score') ? JSON.parse(localStorage.getItem('score')!) : 0\n        this.highscore.push({ name: this.setNameForHighscore(), score: score })\n        this.highscore.sort((a, b) => b.score - a.score)\n        if (this.highscore.length > 3) {\n            this.highscore.pop()\n        }\n        localStorage.setItem('highscore', JSON.stringify(this.highscore))\n        this.condition = 'highscoreChart'\n    }\n\n    setNameForHighscore() {\n        const nameInput: HTMLInputElement = this.nameInput.nativeElement\n        return nameInput.value\n    }\n\n    checkIfHighscore() {\n        this.highscore.forEach((element) => {\n            if (element.score < JSON.parse(localStorage.getItem('score')!)) {\n                this.condition = 'inputHighscoreName'\n            }\n        })\n    }\n\n    ngOnInit(): void {\n        this.checkIfHighscore()\n    }\n\n    @Output() sendMessage = new EventEmitter()\n\n    onClickRestart() {\n        this.sendMessage.emit(this.conditionToSendRestart)\n    }\n    onClickExit() {\n        this.sendMessage.emit(this.conditionToSendExit)\n    }\n}\n",
            "styleUrl": "./ending-screen.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>You died!</h1>\n<div *ngIf=\"condition === 'highscoreChart'\">\n    <h2>Top 3</h2>\n    <h3 *ngFor=\"let topScore of topScores\">{{ [topScore + 1] }} {{ [highscore[topScore].name] }} {{\n        [highscore[topScore].score] }}</h3>\n</div>\n<div *ngIf=\"condition === 'inputHighscoreName'\">\n    <input type=\"text\" name=\"\" id=\"\" #nameInput>\n    <button type=\"button\" (click)=\"sortHighscore()\">Confirm</button>\n</div>\n<app-button-component [color]=\"'none'\" [label]=\"'Restart'\" (onClick)=\"onClickRestart()\"></app-button-component>\n<app-button-component [color]=\"'none'\" [label]=\"'Exit'\" (onClick)=\"onClickExit()\"></app-button-component>"
        },
        {
            "name": "GameComponent",
            "id": "component-GameComponent-8ef6ba90f885e63f7009461730137de70e30259afeaf575d2ce2b736da5fde0b03eb81a0ffd3f6e366dd397ad696c8aaa39cea3690280db7df6c4ad72fe75a9a",
            "file": "src/app/game/game.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-game",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./game.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "condition",
                    "defaultValue": "'start'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "countries",
                    "defaultValue": "countries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "getMsgFromEndingScreen",
                    "args": [
                        {
                            "name": "$event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMsgFromHome",
                    "args": [
                        {
                            "name": "$event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMsgFromTile",
                    "args": [
                        {
                            "name": "$event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TileComponent",
                    "type": "component"
                },
                {
                    "name": "HomeComponent",
                    "type": "component"
                },
                {
                    "name": "EndingScreenComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { RouterLink, RouterOutlet } from '@angular/router'\nimport { } from '@storybook/angular'\nimport { ReactiveFormsModule } from '@angular/forms'\nimport countries from '../../assets/countries.json'\n\nimport { TileComponent } from '../tile/tile.component'\nimport { HomeComponent } from '../home/home.component'\nimport { EndingScreenComponent } from '../ending-screen/ending-screen.component'\n\n\n@Component({\n    selector: 'app-game',\n    standalone: true,\n    imports: [CommonModule, RouterLink, RouterOutlet, ReactiveFormsModule, TileComponent, HomeComponent, EndingScreenComponent],\n    templateUrl: './game.component.html',\n    styleUrl: './game.component.css'\n})\n\nexport class GameComponent {\n    countries = countries\n\n    condition = 'start'\n\n    getMsgFromHome($event: string) { this.condition = $event }\n    getMsgFromEndingScreen($event: string) { this.condition = $event }\n    getMsgFromTile($event: string) { this.condition = $event }\n\n}\n",
            "styleUrl": "./game.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "\n<app-home (sendMessage)='getMsgFromHome($event)' *ngIf=\"condition == 'start'\"></app-home>\n<app-tile (sendMessage)='getMsgFromTile($event)' *ngIf=\"condition == 'game'\"></app-tile>\n<app-end (sendMessage)='getMsgFromEndingScreen($event)' *ngIf=\"condition == 'end'\"></app-end>\n<router-outlet></router-outlet>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-965ffe47a8f3618c6db86d34f30356180aac0a466a3a8043adb1fabc9de199303e287c693abc624ea16fa772a19d755f7c185d9bf0ad8e160d73fd58079d0ea8",
            "file": "src/app/home/home.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "sendMessage",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "conditionToSend",
                    "defaultValue": "'game'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "onClickStart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "ButtonComponentComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Output } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { RouterLink, RouterOutlet } from '@angular/router'\n\nimport { ButtonComponentComponent } from '../button-component/button-component.component'\n\n@Component({\n    selector: 'app-home',\n    standalone: true,\n    imports: [CommonModule, RouterLink, RouterOutlet, ButtonComponentComponent],\n    templateUrl: './home.component.html',\n    styleUrl: './home.component.css'\n})\nexport class HomeComponent {\n\n    @Output() sendMessage = new EventEmitter()\n\n    conditionToSend = 'game'\n\n    onClickStart() {\n        this.sendMessage.emit(this.conditionToSend)\n    }\n}\n",
            "styleUrl": "./home.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<section class=\"home-flex\">\n    <img class=\"logo\" src=\"../../assets/images/landpuzzle2.png\" alt=\"Land Puzzle\">\n    <app-button-component [color]=\"'blue'\" [label]=\"'Start'\" (onClick)=\"onClickStart()\"></app-button-component>\n</section>"
        },
        {
            "name": "ReplayComponent",
            "id": "component-ReplayComponent-69744d68fdd16099494acd23ea918c0f60af78becf05ebad84681aed3b21a9d0320206af004588a3cf2dce638547d63326aa7cb27361e1903f459c3ac7e60d9d",
            "file": "src/app/replay/replay.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-replay",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./replay.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core'\n\n@Component({\n    selector: 'app-replay',\n    standalone: true,\n    imports: [],\n    templateUrl: './replay.component.html',\n    styleUrl: './replay.component.css'\n})\nexport class ReplayComponent {\n\n}\n",
            "styleUrl": "./replay.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>replay works!</p>\n"
        },
        {
            "name": "TileComponent",
            "id": "component-TileComponent-d7f910c1b5a313814cf79afb298304dfdb1bf5f351f37564afc1e2364c6f3802621f6dd8203516dd922079d0608894b574316eac77135e36410b0284ac2b36db",
            "file": "src/app/tile/tile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tile",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./tile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "sendMessage",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "conditionToSendEnd",
                    "defaultValue": "'end'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "conditionToSendStart",
                    "defaultValue": "'start'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "correctTestAnswerId",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "countries",
                    "defaultValue": "countries",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'form'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "lives",
                    "defaultValue": "3",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "markedTiles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "randomCountryIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "replay",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<object>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "score",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "scoreMultiplier",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "snackbar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'snackbar'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "tileElementId",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "tiles",
                    "defaultValue": "new Array(9)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "userSelectedInputTiles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLInputElement[]",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "correctAnswer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCorrectTestAnswerId",
                    "args": [],
                    "optional": false,
                    "returnType": "number[]",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getHighscoreSorted",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRandomCountry",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "invalidAnswer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onCheckConfirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickHome",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 165,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickRestart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetValues",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 152,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveReplayToLocalStorage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveTileGrid",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 144,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setupTileInputElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupTileLabelElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "Element",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSnackbar",
                    "args": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateReplayTiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponentComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output, ViewChild } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { ElementRef } from '@angular/core'\nimport countries from '../../assets/countries.json'\n\nimport { ButtonComponentComponent } from '../button-component/button-component.component'\n\n@Component({\n    selector: 'app-tile',\n    standalone: true,\n    imports: [CommonModule,ButtonComponentComponent,],\n    templateUrl: './tile.component.html',\n    styleUrl: './tile.component.css'\n})\n\nexport class TileComponent implements OnInit {\n    tileElementId: number[] = []\n    tiles = new Array(9)\n    userSelectedInputTiles: HTMLInputElement[] = []\n    correctTestAnswerId: number[] = []\n    scoreMultiplier: number = 1\n    score: number = 0\n    lives: number = 3\n    randomCountryIndex: number = 0\n    markedTiles: number[] = []\n    replay: Array<object> = []\n\n\n    @Output() sendMessage = new EventEmitter()\n\n    conditionToSendEnd: string = 'end'\n    conditionToSendStart: string = 'start'\n    countries = countries\n\n    getRandomCountry() {\n        this.randomCountryIndex = Math.floor(Math.random() * countries.length)\n    }\n\n    @ViewChild('form') form!: ElementRef\n    @ViewChild('snackbar') snackbar!: ElementRef\n\n    showSnackbar(message: string) {\n        const snackbarHTML: Element = this.snackbar.nativeElement\n        snackbarHTML.innerHTML = message\n        snackbarHTML.className = 'show'\n        setTimeout(function () {\n            snackbarHTML.className = snackbarHTML.className.replace('show', '')\n        }, 3000)\n    }\n\n    ngOnInit(): void {\n        this.getRandomCountry()\n    }\n\n    ngAfterViewInit(): void {\n        this.correctTestAnswerId = this.getCorrectTestAnswerId()\n        const tileElements: Element[] = Array.from(this.form.nativeElement.children)\n        tileElements.forEach((tile, id) => {\n            tile.id = id.toString()\n            Array.from(tile.children).forEach((element: Element, index) => {\n                if (index === 0) {\n                    this.setupTileInputElement(element, id)\n                }\n                else {\n                    this.setupTileLabelElement(element, id)\n                }\n            })\n        })\n    }\n\n    getCorrectTestAnswerId(): number[] {\n        return countries[this.randomCountryIndex].easy\n    }\n\n    setupTileInputElement(element: Element, id: number) {\n        const inputElement = element as HTMLInputElement\n        inputElement.id = 'tile' + id.toString()\n        inputElement.checked = false\n        this.userSelectedInputTiles.push(inputElement)\n        this.tileElementId.push(id)\n    }\n\n    setupTileLabelElement(element: Element, id: number) {\n        const labelElement = element as HTMLLabelElement\n        labelElement.htmlFor = 'tile' + id.toString()\n    }\n\n\n\n    getHighscoreSorted() {\n        localStorage.setItem('score', JSON.stringify(this.score))\n    }\n\n    onCheckConfirm() {\n        this.saveTileGrid()\n        if (this.markedTiles.toString() === this.correctTestAnswerId.toString()) {\n            this.correctAnswer()\n        }\n        else {\n            this.invalidAnswer()\n        }\n        this.resetValues()\n    }\n\n    correctAnswer() {\n        this.score += (100 * this.scoreMultiplier)\n        this.scoreMultiplier += .15\n        this.showSnackbar('Horay! :D')\n        this.getRandomCountry()\n    }\n\n    invalidAnswer() {\n        this.lives--\n        this.scoreMultiplier = 1\n        this.showSnackbar('Oh no! D:')\n        if (this.lives <= 0) {\n            this.saveReplayToLocalStorage()\n            this.getHighscoreSorted()\n            this.sendMessage.emit(this.conditionToSendEnd)\n        }\n    }\n\n    saveReplayToLocalStorage() {\n        localStorage.setItem('latestReplay', JSON.stringify(this.replay))\n    }\n\n    updateReplayTiles() {\n        const replayTiles: number[] = []\n        this.tileElementId.forEach((id) => {\n            if (this.userSelectedInputTiles[id].checked) {\n                replayTiles.push(id)\n            }\n        })\n        const replayTurn = {\n            'moves': replayTiles,\n            'country': countries[this.randomCountryIndex].name,\n            'score': this.score,\n            'multiplier': this.scoreMultiplier\n        }\n        this.replay.push(replayTurn)\n        console.log(this.replay)\n    }\n\n    saveTileGrid() {\n        this.tileElementId.forEach((id) => {\n            if (this.userSelectedInputTiles[id].checked) {\n                this.markedTiles.push(id)\n            }\n        })\n    }\n\n    resetValues() {\n        this.markedTiles = []\n        this.userSelectedInputTiles = []\n        this.tileElementId = []\n        this.ngAfterViewInit()\n    }\n    onClickRestart() {\n        this.getRandomCountry()\n        this.lives = 3\n        this.score = 0\n        this.scoreMultiplier = 1\n        this.resetValues()\n    }\n    onClickHome() {\n        this.sendMessage.emit(this.conditionToSendStart)\n    }\n}\n\n",
            "styleUrl": "./tile.component.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<section class=\"tile\">\n    <section class=\"top-flex\">\n        <section class=\"statistic\">\n            <p class=\"statistics-text\">Lives: {{ lives }}</p>\n            <p class=\"statistics-text\">Score: {{ score }}</p>\n            <p class=\"statistics-text\">Multiplier: {{ scoreMultiplier.toFixed(2) }}</p>\n        </section>\n\n        <section class=\"\">\n            <button (click)=\"onClickRestart()\">Restart</button>\n            <button (click)=\"onClickHome()\">Home</button>\n        </section>\n    </section>\n\n    <section class=\"draw-container\">\n        <h1 class=\"draw-country\">Draw {{ countries[randomCountryIndex].name }}</h1>\n        <section class=\"form-padding\">\n            <form #form id=\"form\" action=\"\" ng-controller=\"ExampleController\">\n                <section *ngFor=\"let tile of tiles\" class=\"tile-outer\">\n                    <input type=\"checkbox\" id=\"Placeholder\" [ngClass]=\"['display-none', 'tile-checkbox']\">\n                    <label for=\"Placeholder\" class=\"tile-inner\"></label>\n                </section>\n            </form>\n        </section>\n        <app-button-component [color]=\"'blue'\" [label]=\"'Confirm'\" (onClick)=\"onCheckConfirm()\"></app-button-component>\n    </section>\n</section>\n\n<div #snackbar id=\"snackbar\"></div>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n    providers: [provideRouter(routes)]\n}"
            },
            {
                "name": "Confirm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button-component/button-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ButtonComponentStory",
                "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Confirm',\n        color: 'blue',\n    },\n}"
            },
            {
                "name": "Easy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button-component/button-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ButtonComponentStory",
                "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Easy',\n        color: 'green',\n\n    },\n}"
            },
            {
                "name": "Exit",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button-component/button-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ButtonComponentStory",
                "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'EXIT',\n        color: 'none',\n\n    },\n}"
            },
            {
                "name": "Extreme",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button-component/button-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ButtonComponentStory",
                "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Extreme',\n        color: 'black',\n\n    },\n}"
            },
            {
                "name": "Hard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button-component/button-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ButtonComponentStory",
                "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Hard',\n        color: 'red',\n\n    },\n}"
            },
            {
                "name": "Medium",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button-component/button-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ButtonComponentStory",
                "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Medium',\n        color: 'yellow',\n\n    },\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Restart",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button-component/button-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ButtonComponentStory",
                "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'RESTART',\n        color: 'none',\n\n    },\n}"
            },
            {
                "name": "Return",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button-component/button-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ButtonComponentStory",
                "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Return',\n        color: 'none',\n\n    },\n}"
            },
            {
                "name": "Start",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button-component/button-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ButtonComponentStory",
                "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Start',\n        color: 'blue',\n    },\n}"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button-component/button-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ButtonComponentStory",
                "defaultValue": "{\n    args: {},\n}"
            },
            {
                "name": "Tips",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button-component/button-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ButtonComponentStory",
                "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Tips 😀',\n        color: 'smallYellow',\n    },\n}"
            },
            {
                "name": "VeryEasy",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/button-component/button-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ButtonComponentStory",
                "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Very easy',\n        color: 'blue',\n\n    },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonComponentStory",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponentComponent>",
                "file": "src/app/button-component/button-component.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n    providers: [provideRouter(routes)]\n}"
                }
            ],
            "src/app/button-component/button-component.stories.ts": [
                {
                    "name": "Confirm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button-component/button-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonComponentStory",
                    "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Confirm',\n        color: 'blue',\n    },\n}"
                },
                {
                    "name": "Easy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button-component/button-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonComponentStory",
                    "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Easy',\n        color: 'green',\n\n    },\n}"
                },
                {
                    "name": "Exit",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button-component/button-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonComponentStory",
                    "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'EXIT',\n        color: 'none',\n\n    },\n}"
                },
                {
                    "name": "Extreme",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button-component/button-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonComponentStory",
                    "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Extreme',\n        color: 'black',\n\n    },\n}"
                },
                {
                    "name": "Hard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button-component/button-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonComponentStory",
                    "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Hard',\n        color: 'red',\n\n    },\n}"
                },
                {
                    "name": "Medium",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button-component/button-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonComponentStory",
                    "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Medium',\n        color: 'yellow',\n\n    },\n}"
                },
                {
                    "name": "Restart",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button-component/button-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonComponentStory",
                    "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'RESTART',\n        color: 'none',\n\n    },\n}"
                },
                {
                    "name": "Return",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button-component/button-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonComponentStory",
                    "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Return',\n        color: 'none',\n\n    },\n}"
                },
                {
                    "name": "Start",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button-component/button-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonComponentStory",
                    "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Start',\n        color: 'blue',\n    },\n}"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button-component/button-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonComponentStory",
                    "defaultValue": "{\n    args: {},\n}"
                },
                {
                    "name": "Tips",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button-component/button-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonComponentStory",
                    "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Tips 😀',\n        color: 'smallYellow',\n    },\n}"
                },
                {
                    "name": "VeryEasy",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/button-component/button-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonComponentStory",
                    "defaultValue": "{\n    ...Template,\n    args: {\n        label: 'Very easy',\n        color: 'blue',\n\n    },\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/i,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/app/button-component/button-component.stories.ts": [
                {
                    "name": "ButtonComponentStory",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponentComponent>",
                    "file": "src/app/button-component/button-component.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button-component/button-component.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/button-component/button-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Confirm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button-component/button-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Easy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button-component/button-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Exit",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button-component/button-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Extreme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button-component/button-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Hard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button-component/button-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Medium",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button-component/button-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Restart",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button-component/button-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Return",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button-component/button-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Start",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button-component/button-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button-component/button-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Tips",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/button-component/button-component.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VeryEasy",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/ending-screen/ending-screen.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EndingScreenComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/game/game.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/replay/replay.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReplayComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tile/tile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            }
        ]
    }
}